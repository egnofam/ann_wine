# -*- coding: utf-8 -*-
"""annwine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a-Gz_x5fyqLGZg4P15mxWDrhERfuP1j_
"""

import numpy as np
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import datasets

#load dataset
df = datasets.load_wine()

df

X=df.data
y=df.target

#transformation des donnees: mise sur la meme echelle
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#Split data into train test data
X_train,X_test,y_train,y_test = train_test_split(X_scaled,y,test_size=0.2,random_state = 42)

print(X_train.shape,X_test.shape)

model = tf.keras.models.Sequential()

#Ajout des couches au model
model.add(tf.keras.layers.Dense(units=6,activation='relu',kernel_initializer='uniform',input_dim=13))

#Ajout de la couche de sortie
model.add(tf.keras.layers.Dense(units=1,activation='sigmoid',kernel_initializer='uniform'))

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics = ['categorical_accuracy'])

#apprendre le modele
model.summary()

model.fit(X_train,y_train,epochs=100)

#tester le model
loss,accuracy = model.evaluate(X_test,y_test)
print(f"loss = {loss}, accuracy= {accuracy}")

